// Generated by CoffeeScript 1.6.1

define(['InputIO'], function(InputIO) {
  var check, coerce, get, set;
  QUnit.start();
  coerce = InputIO.coerce;
  check = InputIO.check;
  get = InputIO.get;
  set = InputIO.set;
  test('coerce values', function() {
    var type, types, _i, _len;
    types = ['number', 'string', 'boolean', 'date', 'datetime', 'time'];
    for (_i = 0, _len = types.length; _i < _len; _i++) {
      type = types[_i];
      equal(coerce(null, type), null);
      equal(coerce(void 0, type), null);
      if (type === 'boolean') {
        equal(coerce('', type), false);
      } else {
        equal(coerce('', type), null);
      }
    }
    equal(coerce('8', 'number'), 8);
    equal(coerce('8.0', 'number'), 8.0);
    deepEqual(coerce(['1', '2'], 'number'), [1, 2]);
    deepEqual(coerce(NaN, 'number'), null);
    deepEqual(coerce('foo', 'number'), null);
    deepEqual(coerce(true, 'number'), null);
    deepEqual(coerce(false, 'number'), null);
    equal(coerce(8, 'string'), '8');
    equal(coerce(8.0, 'string'), '8');
    equal(coerce(8.1, 'string'), '8.1');
    equal(coerce(true, 'string'), 'true');
    equal(coerce(false, 'string'), 'false');
    equal(coerce('true', 'boolean'), true);
    equal(coerce('foo', 'boolean'), true);
    deepEqual(coerce('Oct 12, 2013', 'date'), new Date(2013, 9, 12));
    deepEqual(coerce('...', 'date'), null);
    deepEqual(coerce('foobar', 'date'), null);
    return deepEqual(coerce('2012-10-14 3:40 pm', 'time'), new Date(2012, 9, 14, 15, 40, 0));
  });
  test('type attrs', function() {
    equal(get('[name=type1]'), 3.3);
    equal(get('[name=type2]'), true);
    equal(get('[name=type3]'), false);
    return deepEqual(get('[name=type4]'), new Date(2013, 2, 2));
  });
  test('validate value', function() {
    equal(check(null, 'number'), false);
    equal(check(null, 'string'), false);
    equal(check(null, 'date'), false);
    equal(check(null, 'time'), false);
    return equal(check(null, 'datetime'), false);
  });
  test('set/get values - multi', function() {
    var getMulti, i, setMulti, _i, _j, _ref, _ref1, _results;
    setMulti = [['bar'], ['foo'], ['bar', 'baz'], 'baz', [], null, '', 'unknown', ['unknown'], ['bar', 'baz']];
    getMulti = [['bar'], ['foo'], ['bar', 'baz'], ['baz'], [], [], [], [], [], ['bar', 'baz']];
    for (i = _i = 0, _ref = setMulti.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      set($('[name=cbox1]'), setMulti[i]);
      deepEqual(get($('[name=cbox1]')), getMulti[i]);
    }
    _results = [];
    for (i = _j = 0, _ref1 = setMulti.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      set($('[name=select-multi]'), setMulti[i]);
      _results.push(deepEqual(get($('[name=select-multi]')), getMulti[i]));
    }
    return _results;
  });
  test('set/get values - single', function() {
    var getSingle, i, setSingle, _i, _j, _ref, _ref1, _results;
    setSingle = ['bar', 'foo', ['baz'], [], null, '', 'unknown', ['unknown'], 'foo'];
    getSingle = ['bar', 'foo', 'baz', null, null, null, null, null, 'foo'];
    for (i = _i = 0, _ref = setSingle.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      set($('[name=rad1]'), setSingle[i]);
      deepEqual(get($('[name=rad1]')), getSingle[i]);
    }
    _results = [];
    for (i = _j = 0, _ref1 = setSingle.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      set($('[name=select]'), setSingle[i]);
      _results.push(deepEqual(get($('[name=select]')), getSingle[i]));
    }
    return _results;
  });
  test('set/get single checkbox', function() {
    set($('[name=cbox2]'), 'foo');
    deepEqual(get($('[name=cbox2]')), 'foo');
    set($('[name=cbox2]'), '');
    deepEqual(get($('[name=cbox2]')), null);
    set($('[name=cbox2]'), 'unknown');
    deepEqual(get($('[name=cbox2]')), null);
    set($('[name=cbox2]'), ['foo']);
    return deepEqual(get($('[name=cbox2]')), 'foo');
  });
  return test('set/get multi text', function() {
    deepEqual(get($('[name=range1]')), ['1', '2']);
    set($('[name=range1]'), [3, 5]);
    deepEqual(get($('[name=range1]')), ['3', '5']);
    set($('[name=range1]'), 4);
    deepEqual(get($('[name=range1]')), ['4', '5']);
    set($('[name=range1]'), [9, 8, 7]);
    deepEqual(get($('[name=range1]')), ['9', '8']);
    deepEqual(get($('[name=range2]')), '1');
    set($('[name=range2]'), [5, 6]);
    return deepEqual(get($('[name=range2]')), '5');
  });
});
